#+TITLE: Modules.el
#+AUTHOR: Sidharth Arya

Organize your emacs config into modules.  

* Basic Usage
Make sure the folder containing modules.el file is in your ~load-path~.
#+begin_src emacs-lisp
    (require 'modules)
    (setq modules-config-list '(
		       (none ())
		       (minimal (compile core appearance vi))
		       (news (compile core appearance mount mail ivy news org))
		       (programming (compile core appearance vi ivy mount org programming vc))
		       (org (compile core appearance vi ivy mount org server compile dashboard))
		       (main (compile core appearance programming vi mount org news mail dashboard vc tracking finance server))
		       ))
    (setq modules-config-default 'main)
    (setq modules-path "~/.emacs.d/lisp")
  (modules-command-line-args-process)
#+end_src
** Use Package
 If you already use ~use-package~. Then, the config below works, although this package is not yet part of melpa so, either have it manually be in the ~load-path~, or use straight.el.
  #+begin_src emacs-lisp
    (use-package modules
      :custom
      (modules-config-list '(
                             (none ())
                             (minimal (compile core appearance vi))
                             (news (compile core appearance mount mail ivy news org))
                             (programming (compile core appearance vi ivy mount org programming vc))
                             (org (compile core appearance vi ivy mount org server compile dashboard))
                             (main (compile core appearance programming vi mount org news mail dashboard vc tracking finance server))
                             ))
      (modules-config-default 'main)
      (modules-path "~/.emacs.d/lisp")
      :config
      (modules-command-line-args-process))
  #+end_src
Modules can also be loaded interactively by using the ~modules-load~ function.

All the different configurations can be accessed from the command line as 
#+begin_src sh
emacs --config none --modules "core appearance vi"
#+end_src

* Dependencies
If a module depends on another module for some feature or service, the module can include a line which lists all the modules it needs.
#+begin_src emacs-lisp
(modules-load '(space separated list of modules))
#+end_src
A module will be loaded, only once regardless of how many times it's added within modules-load during startup. But when modules-load is called interactively, it will always load the module again.

If you have a portion of code in one of your code which depends on another module. You can can use a when block to make sure that portion of code is not evaluated if the module is not loaded.
#+BEGIN_SRC emacs-lisp
  (when (modules-loaded-p 'module-name)
    ;; Dependent Code
    )
#+END_SRC
* Example Module
  There are no restrictions at all as to what belongs in your specific module. But if you need to depend on a module you must add (modules-load '(list of modules)).
  
  #+begin_src emacs-lisp
    (modules-load '(versioncontrol syntaxcheck completion))
    ;; Specific emacs settings for programming environment
    (add-hook 'prog-mode-hook 'flycheck-mode)
    (add-hook 'prog-mode-hook 'company-mode)
    (global-set-key (kbd "C-x g") 'magit)
  #+end_src
  
Feel free to refer to my config at: https://github.com/SidharthArya/.emacs.d
